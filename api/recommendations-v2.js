import OpenAI from "openai";

const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY 
});

export default async function handler(req, res) {
  const deploymentId = `v2-${Date.now()}`;
  
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  res.setHeader('X-Deployment-ID', deploymentId);
  res.setHeader('X-Function-Version', '2.0');
  
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { query } = req.body;
    if (!query || typeof query !== 'string') {
      return res.status(400).json({ message: "Query is required" });
    }

    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'default_key') {
      return res.status(500).json({ message: "OpenAI API key not configured" });
    }

    const prompt = `You are an expert Australian wine sommelier. A customer asks: "${query}"

Recommend 3 specific Australian wines that match their request. Focus on real wines from established Australian producers like Penfolds, Wolf Blass, Wynns, Henschke, Leeuwin Estate, etc.

Return JSON with this structure:
{
  "recommendations": [
    {
      "name": "Producer Wine Name",
      "type": "Wine varietal (Shiraz, Chardonnay, etc.)",
      "region": "Australian wine region",
      "vintage": "Recent year",
      "description": "Detailed tasting notes and food pairing suggestions",
      "priceRange": "AUD price range",
      "abv": "Alcohol percentage",
      "rating": "Professional score out of 100",
      "matchReason": "Why this wine suits the customer's request"
    }
  ]
}`;

    const response = await Promise.race([
      openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: "You are an expert Australian wine sommelier. Only recommend real Australian wines from established producers."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        response_format: { type: "json_object" },
        max_tokens: 1500,
        temperature: 0.7
      }),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('OpenAI timeout')), 25000)
      )
    ]);

    const result = JSON.parse(response.choices[0].message.content || "{}");
    const recommendations = result.recommendations || [];

    if (recommendations.length === 0) {
      throw new Error("No recommendations generated by OpenAI");
    }

    res.status(200).json({ 
      recommendations,
      timestamp: new Date().toISOString(),
      deploymentId,
      source: 'openai_v2'
    });
    
  } catch (error) {
    console.error("Recommendations v2 error:", error);
    res.status(500).json({ 
      message: "Failed to generate wine recommendations",
      error: error.message,
      deploymentId,
      timestamp: new Date().toISOString()
    });
  }
}